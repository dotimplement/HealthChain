"""
Synthea dataset loader.

Loads synthetic patient data generated by Synthea.
"""

import logging
from pathlib import Path
from typing import List, Optional

from healthchain.models import Prefetch
from healthchain.sandbox.datasets import DatasetLoader

log = logging.getLogger(__name__)


class SyntheaLoader(DatasetLoader):
    """
    Loader for Synthea-generated FHIR data.

    Synthea is an open-source synthetic patient generator that produces
    realistic patient records in FHIR format. This loader supports loading
    Synthea-generated FHIR bundles.

    Examples:
        Load sample of Synthea patients:
        >>> loader = SyntheaLoader(data_path="path/to/synthea/output/fhir")
        >>> prefetch = loader.load(sample_size=10)

        Load specific patients:
        >>> prefetch = loader.load(
        ...     patient_ids=["patient-123", "patient-456"]
        ... )
    """

    def __init__(self, data_path: Optional[Path] = None):
        """
        Initialize Synthea loader.

        Args:
            data_path: Path to Synthea FHIR output directory. If None, will
                      attempt to find in common locations.
        """
        self._data_path = Path(data_path) if data_path else self._find_data_path()

    @property
    def name(self) -> str:
        """Dataset name for registration."""
        return "synthea"

    @property
    def description(self) -> str:
        """Dataset description."""
        return "Synthea: Synthetic patient data generated by SyntheaTM"

    def _find_data_path(self) -> Optional[Path]:
        """
        Attempt to find Synthea data in common locations.

        Returns:
            Path to data directory if found, None otherwise
        """
        import os

        # Check environment variable
        env_path = os.getenv("SYNTHEA_PATH")
        if env_path and Path(env_path).exists():
            return Path(env_path)

        # Check common Synthea output locations
        common_paths = [
            Path.cwd() / "output" / "fhir",
            Path.cwd() / "data" / "synthea",
            Path.home() / "synthea" / "output" / "fhir",
        ]

        for path in common_paths:
            if path.exists():
                log.info(f"Found Synthea data at: {path}")
                return path

        log.warning(
            "Synthea data path not specified and not found in common locations. "
            "You can set SYNTHEA_PATH environment variable or provide data_path parameter."
        )
        return None

    def load(
        self,
        patient_ids: Optional[List[str]] = None,
        sample_size: Optional[int] = None,
        random_seed: Optional[int] = None,
        **kwargs,
    ) -> Prefetch:
        """
        Load Synthea FHIR data as Prefetch object.

        Args:
            patient_ids: Specific patient IDs to load
            sample_size: Number of random patients to sample
            random_seed: Random seed for reproducible sampling
            **kwargs: Additional parameters (reserved for future use)

        Returns:
            Prefetch object containing FHIR resources

        Raises:
            FileNotFoundError: If data path is not set or doesn't exist
            NotImplementedError: Full implementation pending
        """
        if self._data_path is None or not self._data_path.exists():
            raise FileNotFoundError(
                f"Synthea data not found at: {self._data_path}. "
                "Please provide a valid data_path or set SYNTHEA_PATH environment variable."
            )

        # TODO: Implement Synthea FHIR bundle loading
        # Synthea typically outputs individual FHIR bundles per patient
        # Format: <patient-id>.json containing a Bundle resource

        raise NotImplementedError(
            "Synthea loader is not yet fully implemented. "
            "This is a placeholder for future functionality. "
            "For now, please use load_prefetch() with CdsDataGenerator for synthetic data."
        )

    def set_data_path(self, path: Path) -> "SyntheaLoader":
        """
        Set the data path for the loader.

        Args:
            path: Path to Synthea data directory

        Returns:
            Self for method chaining

        Raises:
            FileNotFoundError: If path doesn't exist
        """
        path = Path(path)
        if not path.exists():
            raise FileNotFoundError(f"Data path does not exist: {path}")

        self._data_path = path
        log.info(f"Set Synthea data path to: {path}")
        return self
