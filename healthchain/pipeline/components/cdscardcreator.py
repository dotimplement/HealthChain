import logging
from typing import Optional, Dict, Any
from jinja2 import Template

from healthchain.pipeline.components.base import BaseComponent
from healthchain.io.containers import Document
from healthchain.models.responses.cdsresponse import Card, Source, IndicatorEnum


logger = logging.getLogger(__name__)


class CdsCardCreator(BaseComponent[str]):
    """
    Component that creates CDS Cards using templates.

    The component uses a template string to format model outputs into CDS Hooks cards
    that can be displayed in an EHR.

    Args:
        template (str, optional): Template string for card creation. If not provided,
            uses a default template that creates an info card with the model output.
        content (str, optional): Static content to use instead of model output.
        source (str, optional): Source framework to get model output from (e.g. "huggingface", "langchain").
        task (str, optional): Task name to get model output from (e.g. "summarization", "chat").
        default_source (Dict[str, Any], optional): Default source information for the cards.
            Defaults to {"label": "Card Generated by HealthChain"}.

    Example:
        >>> # Create cards from model output
        >>> creator = CdsCardCreator(source="huggingface", task="summarization")
        >>> doc = creator(doc)  # Creates cards from summarization output

        >>> # Create cards with static content
        >>> creator = CdsCardCreator(content="This is a static card message")
        >>> doc = creator(doc)  # Creates card with the static content

        >>> # Create cards with custom template
        >>> template = '''
        ... {
        ...     "summary": "Custom card: {{ model_output }}",
        ...     "indicator": "info",
        ...     "source": {{ default_source | tojson }},
        ...     "detail": "{{ model_output }}"
        ... }
        ... '''
        >>> creator = CdsCardCreator(template=template)
        >>> doc = creator(doc)

    """

    # TODO: make source and other fields configurable from model too
    DEFAULT_TEMPLATE = """
    {
        "summary": "{{ model_output[:140] }}",
        "indicator": "info",
        "source": {{ default_source | tojson }},
        "detail": "{{ model_output }}"
    }
    """

    def __init__(
        self,
        template: Optional[str] = None,
        content: Optional[str] = None,
        source: Optional[str] = None,
        task: Optional[str] = None,
        default_source: Optional[Dict[str, Any]] = None,
    ):
        self.template = Template(
            template if template is not None else self.DEFAULT_TEMPLATE
        )
        self.content = content
        self.source = source
        self.task = task
        self.default_source = default_source or {
            "label": "Card Generated by HealthChain"
        }

    def create_card(self, content: str) -> Card:
        """Creates a CDS Card using the template and model output."""
        try:
            # Render template with model output
            import json

            card_json = self.template.render(
                model_output=content, default_source=self.default_source
            )

            # Parse the rendered JSON into card fields
            card_fields = json.loads(card_json)

            return Card(
                summary=card_fields["summary"][:140],  # Enforce max length
                indicator=IndicatorEnum(card_fields["indicator"]),
                source=Source(**card_fields["source"]),
                detail=card_fields.get("detail"),
                suggestions=card_fields.get("suggestions"),
                selectionBehavior=card_fields.get("selectionBehavior"),
                overrideReasons=card_fields.get("overrideReasons"),
                links=card_fields.get("links"),
            )
        except Exception as e:
            raise ValueError(f"Error creating card: {str(e)}")

    def __call__(self, doc: Document) -> Document:
        """
        Process the document and create CDS cards from model outputs or provided content.

        This method creates CDS Hooks cards either from model-generated text outputs
        stored in the document's model outputs container, or from explicitly provided
        content. The cards are created using the configured template and added to
        the document's CDS container.

        Args:
            doc (Document): Input document containing model outputs or to add cards to

        Returns:
            Document: Document with generated CDS cards added

        Raises:
            ValueError: If neither model source/task nor content is provided
        """
        if self.source and self.task:
            generated_text = doc.models.get_generated_text(self.source, self.task)
            if not generated_text:
                logger.warning(
                    f"No generated text for {self.source}/{self.task} found for CDS card creation!"
                )
                return doc
        elif self.content:
            generated_text = [self.content]
        else:
            raise ValueError(
                "Either model output (source and task) or content need to be provided for CDS card creation!"
            )

        # Create card from model output
        cards = []
        for text in generated_text:
            try:
                card = self.create_card(text)
                cards.append(card)
            except Exception as e:
                logger.warning(f"Error creating card: {str(e)}")

        doc.add_cds_cards(cards)

        return doc
